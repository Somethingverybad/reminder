import logging
from datetime import datetime, timedelta, date

import aiohttp
from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from services.api import *
from states import Form
from handlers.utils import *
from services.api import get_categories

logger = logging.getLogger(__name__)
router = Router()



# üîπ –ö–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    success = await register_user_api(message.from_user)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="get_tasks")],
        [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")],
    ])
    if success:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()

@router.message(Command("newtask"))
async def start_new_task(message: types.Message, state: FSMContext):
    await state.set_state(Form.task_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—ç—Ç–∞–ø–Ω–æ
@router.message(Form.task_title)
async def task_title_input(message: types.Message, state: FSMContext):
    await state.update_data(task_title=message.text)
    await state.set_state(Form.task_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@router.message(Form.task_description)
async def task_description_input(message: types.Message, state: FSMContext):
    await state.update_data(task_description=message.text)
    await state.set_state(Form.task_due_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=date_choice_keyboard())

@router.message(Form.task_due_date)
async def task_due_date_input(message: types.Message, state: FSMContext):
    try:
        due_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        await state.update_data(task_due_date=str(due_date))
        await state.set_state(Form.task_due_time)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏:", reply_markup=time_choice_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

@router.callback_query(lambda c: c.data and c.data.startswith("date_"))
async def date_choice_handler(callback: CallbackQuery, state: FSMContext):
    today = date.today()
    value = callback.data.split("_")[1]

    if value == "today":
        selected = today
    elif value == "tomorrow":
        selected = today + timedelta(days=1)
    elif value == "dayafter":
        selected = today + timedelta(days=2)
    elif value == "manual":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        await state.set_state(Form.task_due_date)
        await callback.answer()
        return
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞.")
        return

    await state.update_data(task_due_date=str(selected))
    await state.set_state(Form.task_due_time)
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏:", reply_markup=time_choice_keyboard())
    await callback.answer()

async def finalize_task_creation(user_id: int, state: FSMContext, message_or_cbmsg: types.Message):
    data = await state.get_data()
    try:
        due_time = datetime.strptime(data["task_due_time"], "%H:%M").time()
        due_date = datetime.strptime(data["task_due_date"], "%Y-%m-%d")
        due_datetime = datetime.combine(due_date, due_time)

        response = await create_task(
            user_id=user_id,
            title=data["task_title"],
            description=data["task_description"],
            due_date=due_datetime.isoformat()
        )

        if response.get("id"):
            await state.update_data(task_id=response["id"])
            categories = await get_categories()
            if categories:
                kb = categories_keyboard(categories)
                await message_or_cbmsg.answer(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {data['task_title']}\n"
                    f"üìÖ –ù–∞ {due_datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏:",
                    reply_markup=kb
                )
                await state.set_state(Form.task_category)
            else:
                await message_or_cbmsg.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                await state.clear()
        else:
            await message_or_cbmsg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {response}")
            await state.clear()
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await message_or_cbmsg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("time_"))
async def time_choice_handler(callback: CallbackQuery, state: FSMContext):
    value = callback.data.split("_")[1]
    if value == "manual":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        await state.set_state(Form.task_due_time)
        await callback.answer()
        return
    try:
        minutes = int(value)
        now = datetime.now()
        due_dt = now + timedelta(minutes=minutes)
        await state.update_data(task_due_date=str(due_dt.date()))
        await state.update_data(task_due_time=due_dt.strftime("%H:%M"))
        await callback.message.answer(f"‚è∞ –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: {due_dt.strftime('%H:%M')}")
        await finalize_task_creation(callback.from_user.id, state, callback.message)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏.")

@router.message(Form.task_due_time)
async def task_due_time_input(message: types.Message, state: FSMContext):
    try:
        input_time = message.text.strip()
        logger.info(f"‚è∞ –í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è: '{input_time}'")

        due_time = datetime.strptime(input_time, "%H:%M").time()
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {due_time}")

        data = await state.get_data()
        logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ FSM: {data}")

        due_date = datetime.strptime(data["task_due_date"], "%Y-%m-%d")
        due_datetime = datetime.combine(due_date, due_time)
        logger.info(f"üìÜ –ò—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {due_datetime}")

        user_id = message.from_user.id
        response = await create_task(
            user_id=user_id,
            title=data["task_title"],
            description=data["task_description"],
            due_date=due_datetime.isoformat()
        )
        logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç API: {response}")

        if response.get("id"):
            await state.update_data(task_id=response["id"])
            categories = await get_categories()
            if categories:
                kb = categories_keyboard(categories)
                await message.answer(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {data['task_title']}\n"
                    f"üìÖ –ù–∞ {due_datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏:",
                    reply_markup=kb
                )
                await state.set_state(Form.task_category)
            else:
                await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                await state.clear()
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. {response}")
            await state.clear()

    except ValueError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(lambda c: c.data and c.data.startswith("set_category:"))
async def category_chosen_handler(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split(":")[1]
    data = await state.get_data()
    task_id = data.get("task_id")
    if not task_id:
        await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return
    success = await update_task(task_id, {"category": category_id})
    if success:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞")
        await callback.message.edit_reply_markup()
        await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)

# üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data == "get_tasks")
async def handle_get_tasks(callback: CallbackQuery):
    user_id = callback.from_user.id
    tasks = await get_tasks(user_id)
    await callback.message.answer(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n{tasks}")
    await callback.answer()

@router.callback_query(lambda c: c.data == "new_task")
async def handle_new_task(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.task_title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    await callback.answer()
