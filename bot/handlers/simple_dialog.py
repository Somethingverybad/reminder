
import logging
from datetime import datetime, timedelta, date

from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from services.django_api import *
from states import Form
from handlers.utils import *
from aiogram.utils.text_decorations import html_decoration as html


logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start", "menu"))
@router.message(lambda message: message.text.lower() in ["–º–µ–Ω—é", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
async def show_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    success = await register_user_api(message.from_user)
    if success:
        await show_main_keyboard(message)
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=ReplyKeyboardRemove())


async def show_main_keyboard(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üè∑ –¢–µ–≥–∏")],  # –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–≥–æ–≤
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ], resize_keyboard=True
    )
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)


@router.message(lambda message: message.text == "üè∑ –¢–µ–≥–∏")
async def show_user_categories(message: types.Message):
    categories = await get_categories(user_id=message.from_user.id)
    if not categories:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(text=cat["name"], callback_data=f"edit_cat:{cat['id']}")]
        for cat in categories
    ]
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥", callback_data="create_cat")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í–∞—à–∏ —Ç–µ–≥–∏:", reply_markup=kb)




@router.message(lambda message: message.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
async def start_new_task(message: types.Message, state: FSMContext):
    await state.set_state(Form.task_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                             resize_keyboard=True))


@router.message(Form.task_title)
async def process_task_title(message: types.Message, state: FSMContext):
    await state.update_data(task_title=message.text)
    await state.set_state(Form.task_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")


@router.message(Form.task_description)
async def process_task_description(message: types.Message, state: FSMContext):
    await state.update_data(task_description=message.text)
    await state.set_state(Form.task_due_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏:",
                         reply_markup=date_choice_keyboard())


@router.callback_query(Form.task_due_date, lambda c: c.data.startswith("date_"))
async def process_task_date(callback: CallbackQuery, state: FSMContext):
    today = date.today()
    value = callback.data.split("_")[1]

    if value == "today":
        selected = today
    elif value == "tomorrow":
        selected = today + timedelta(days=1)
    elif value == "dayafter":
        selected = today + timedelta(days=2)
    elif value == "manual":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    await state.update_data(task_due_date=str(selected))
    await state.set_state(Form.task_due_time)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                                  reply_markup=time_choice_keyboard())
    await callback.answer()


@router.message(Form.task_due_date)
async def process_manual_date(message: types.Message, state: FSMContext):
    try:
        due_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        await state.update_data(task_due_date=str(due_date))
        await state.set_state(Form.task_due_time)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                             reply_markup=time_choice_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@router.callback_query(Form.task_due_time, lambda c: c.data.startswith("time_"))
async def process_task_time(callback: CallbackQuery, state: FSMContext):
    value = callback.data.split("_")[1]

    if value == "manual":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return

    try:
        minutes = int(value)
        due_dt = datetime.now() + timedelta(minutes=minutes)
        await state.update_data(task_due_time=due_dt.strftime("%H:%M"))
        await finalize_task_creation(callback.from_user.id, state, callback.message)
    except Exception as e:
        logger.error(f"Time selection error: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
    finally:
        await callback.answer()


@router.message(Form.task_due_time)
async def process_manual_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text.strip(), "%H:%M")
        await state.update_data(task_due_time=message.text.strip())
        await finalize_task_creation(message.from_user.id, state, message)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú")


async def finalize_task_creation(user_id: int, state: FSMContext, message_or_cbmsg: types.Message):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏, –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    data = await state.get_data()

    try:
        due_time = datetime.strptime(data["task_due_time"], "%H:%M").time()
        due_date = datetime.strptime(data["task_due_date"], "%Y-%m-%d").date()
        due_datetime = datetime.combine(due_date, due_time)

        response = await create_task(
            user_id=user_id,
            title=data["task_title"],
            description=data["task_description"],
            due_date=due_datetime.isoformat(),
            reminder_intervals=[],
            remind_daily=False
        )

        if response.get("id"):
            await message_or_cbmsg.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

            categories = await get_categories(user_id=user_id)
            if categories:
                await message_or_cbmsg.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=categories_keyboard(categories)
                )
                await state.update_data(task_id=response["id"])
                await state.set_state(Form.task_category)
                return
        else:
            await message_or_cbmsg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

    except Exception as e:
        logger.error(f"Task finalization error: {e}")
        await message_or_cbmsg.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")

    await state.clear()
    await show_main_keyboard(message_or_cbmsg)



@router.callback_query(lambda c: c.data.startswith("done:"))
async def mark_task_done(callback: CallbackQuery):
    task_id = callback.data.split(":")[1]

    success = await update_task(task_id, {"is_done": True})

    if success:
        await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")

    await callback.answer()

@router.callback_query(lambda c: c.data == "create_cat")
async def create_category_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.category_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞:")

@router.message(Form.category_name)
async def create_category_name_entered(message: types.Message, state: FSMContext):
    name = message.text.strip()
    user_id = message.from_user.id

    response = await create_category (user_id, name)  # —Ä–µ–∞–ª–∏–∑—É–π create_category_api –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if response.get("id"):
        await message.answer("‚úÖ –¢–µ–≥ —Å–æ–∑–¥–∞–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞.")
    await state.clear()
    await show_main_keyboard(message)


@router.callback_query(lambda c: c.data.startswith("edit_cat:"))
async def edit_category(callback: CallbackQuery, state: FSMContext):
    cat_id = callback.data.split(":")[1]

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"rename_cat:{cat_id}"),
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥", callback_data=f"delete_cat:{cat_id}")
            ]
        ],
        row_width=2
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@router.callback_query(lambda c: c.data.startswith("rename_cat:"))
async def rename_category_start(callback: CallbackQuery, state: FSMContext):
    cat_id = callback.data.split(":")[1]
    await state.update_data(editing_cat_id=cat_id)
    await state.set_state(Form.category_rename)  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Form
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞:")
    await callback.answer()


@router.message(Form.category_rename)
async def rename_category_process(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cat_id = data.get("editing_cat_id")
    new_name = message.text.strip()

    # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API
    success = await update_category_api(cat_id, {"name": new_name})  # –†–µ–∞–ª–∏–∑—É–π—Ç–µ update_category_api

    if success:
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")

    await state.clear()
    await show_main_keyboard(message)


@router.callback_query(lambda c: c.data.startswith("delete_cat:"))
async def delete_category_confirm(callback: CallbackQuery, state: FSMContext):
    cat_id = callback.data.split(":")[1]
    kb = InlineKeyboardMarkup(row_width=2,
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_cat:{cat_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_cat")
            ]
        ]
    )
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥?", reply_markup=kb)
    await callback.answer()


@router.callback_query(lambda c: c.data == "cancel_delete_cat")
async def cancel_delete_category(callback: CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("confirm_delete_cat:"))
async def delete_category(callback: CallbackQuery):
    cat_id = callback.data.split(":")[1]

    success = await delete_category_api(cat_id)  # –†–µ–∞–ª–∏–∑—É–π—Ç–µ delete_category_api

    if success:
        await callback.message.answer("‚úÖ –¢–µ–≥ —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞.")

    await callback.answer()


@router.callback_query(Form.task_category, lambda c: c.data.startswith("set_category:"))
async def process_task_category(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split(":")[1]
    data = await state.get_data()
    print(category_id)
    if await update_task(data["task_id"], {"category_id": category_id}):
        await callback.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    await callback.answer()
    await state.clear()
    await show_main_keyboard(callback.message)

@router.message(lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def ask_category_filter(message: types.Message, state: FSMContext):
    categories = await get_categories(user_id=message.from_user.id)

    buttons = [[InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="filter_cat:all")]]

    for cat in categories:
        buttons.append([InlineKeyboardButton(text=cat["name"], callback_data=f"filter_cat:{cat['id']}")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á:", reply_markup=kb)
    await state.set_state(Form.task_category_filter)

@router.callback_query(Form.task_category_filter, lambda c: c.data.startswith("filter_cat:"))
async def filter_tasks_by_category(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split(":")[1]

    if category_id == "all":
        category_id = None
    else:
        await state.update_data(filter_category=category_id)

    tasks = await get_tasks(callback.from_user.id, category=category_id)

    if not tasks:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        for task in tasks:
            task_id = task["id"]
            title = html.quote(task["title"])
            description = html.quote(task["description"] or "")
            due_date = datetime.fromisoformat(task["due_date"]).strftime("%d.%m.%Y %H:%M")
            category_name = task.get("category", {}).get("name", "–ë–µ–∑ —Ç–µ–≥–∞")

            text = (
                f"<b>{title}</b>\nüïì <i>{due_date}</i>\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ:\n {description}\n\n"
                f"–¢–µ–≥: <i>{category_name}</i>"
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å - {title}", callback_data=f"done:{task_id}")]
                ]
            )

            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await get_categories(user_id=callback.from_user.id)

    buttons = [[InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="filter_cat:all")]]
    for cat in categories:
        buttons.append([InlineKeyboardButton(text=cat["name"], callback_data=f"filter_cat:{cat['id']}")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á:", reply_markup=kb)
    await callback.answer()


@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await show_main_keyboard(message)
