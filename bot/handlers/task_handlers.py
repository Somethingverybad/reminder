import logging
from datetime import datetime, timedelta, date
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

from services.django_api import get_tasks, create_task, update_task
from states import Form
from handlers.utils import date_choice_keyboard, time_choice_keyboard, categories_keyboard
from handlers.simple_dialog import router
from aiogram.utils.text_decorations import html_decoration as html

logger = logging.getLogger(__name__)

@router.message(lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_user_tasks(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("filter_category")

    tasks = await get_tasks(message.from_user.id, category=category_id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    for task in tasks:
        task_id = task["id"]
        title = html.quote(task["title"])
        description = html.quote(task["description"] or "")
        due_date = datetime.fromisoformat(task["due_date"]).strftime("%d.%m.%Y %H:%M")
        category_name = task.get("category", {}).get("name", "–ë–µ–∑ —Ç–µ–≥–∞")

        text = (f"<b>{title}</b>\nüïì <i>{due_date}</i>\n\n–û–ø–∏—Å–∞–Ω–∏–µ:\n {description}\n\n"
                f"–¢–µ–≥: <i>{category_name}</i>")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å - {title}", callback_data=f"done:{task_id}")]
            ]
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(lambda message: message.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
async def start_new_task(message: types.Message, state: FSMContext):
    await state.set_state(Form.task_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                             resize_keyboard=True))

@router.message(Form.task_title)
async def process_task_title(message: types.Message, state: FSMContext):
    await state.update_data(task_title=message.text)
    await state.set_state(Form.task_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@router.message(Form.task_description)
async def process_task_description(message: types.Message, state: FSMContext):
    await state.update_data(task_description=message.text)
    await state.set_state(Form.task_due_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏:",
                         reply_markup=date_choice_keyboard())

@router.callback_query(Form.task_due_date, lambda c: c.data.startswith("date_"))
async def process_task_date(callback: CallbackQuery, state: FSMContext):
    today = date.today()
    value = callback.data.split("_")[1]

    if value == "today":
        selected = today
    elif value == "tomorrow":
        selected = today + timedelta(days=1)
    elif value == "dayafter":
        selected = today + timedelta(days=2)
    elif value == "manual":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    await state.update_data(task_due_date=str(selected))
    await state.set_state(Form.task_due_time)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                                  reply_markup=time_choice_keyboard())
    await callback.answer()

@router.message(Form.task_due_date)
async def process_manual_date(message: types.Message, state: FSMContext):
    try:
        due_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        await state.update_data(task_due_date=str(due_date))
        await state.set_state(Form.task_due_time)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                             reply_markup=time_choice_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.callback_query(Form.task_due_time, lambda c: c.data.startswith("time_"))
async def process_task_time(callback: CallbackQuery, state: FSMContext):
    value = callback.data.split("_")[1]

    if value == "manual":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return

    try:
        minutes = int(value)
        due_dt = datetime.now() + timedelta(minutes=minutes)
        await state.update_data(task_due_time=due_dt.strftime("%H:%M"))
        await finalize_task_creation(callback.from_user.id, state, callback.message)
    except Exception as e:
        logger.error(f"Time selection error: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
    finally:
        await callback.answer()

@router.message(Form.task_due_time)
async def process_manual_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text.strip(), "%H:%M")
        await state.update_data(task_due_time=message.text.strip())
        await finalize_task_creation(message.from_user.id, state, message)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú")

async def finalize_task_creation(user_id: int, state: FSMContext, message_or_cbmsg: types.Message):
    data = await state.get_data()

    try:
        due_time = datetime.strptime(data["task_due_time"], "%H:%M").time()
        due_date = datetime.strptime(data["task_due_date"], "%Y-%m-%d").date()
        due_datetime = datetime.combine(due_date, due_time)

        response = await create_task(
            user_id=user_id,
            title=data["task_title"],
            description=data["task_description"],
            due_date=due_datetime.isoformat(),
            reminder_intervals=[],
            remind_daily=False
        )

        if response.get("id"):
            await message_or_cbmsg.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

            categories = await get_categories()
            if categories:
                await message_or_cbmsg.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=categories_keyboard(categories)
                )
                await state.update_data(task_id=response["id"])
                await state.set_state(Form.task_category)
                return
        else:
            await message_or_cbmsg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

    except Exception as e:
        logger.error(f"Task finalization error: {e}")
        await message_or_cbmsg.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")

    await state.clear()
    await show_main_keyboard(message_or_cbmsg)

@router.callback_query(Form.task_category, lambda c: c.data.startswith("set_category:"))
async def process_task_category(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split(":")[1]
    data = await state.get_data()

    if await update_task(data["task_id"], {"category": category_id}):
        await callback.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    await callback.answer()
    await state.clear()
    await show_main_keyboard(callback.message)

@router.callback_query(lambda c: c.data.startswith("done:"))
async def mark_task_done(callback: CallbackQuery):
    task_id = callback.data.split(":")[1]

    success = await update_task(task_id, {"is_done": True})

    if success:
        await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")

    await callback.answer()
